Quick Sort - Problem Statement



Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 



Main Code:


import java.util.Scanner;

public class Runner {
	
	static Scanner s = new Scanner(System.in);
	
	public static int[] takeInput(){
		int size = s.nextInt();
		int[] input = new int[size];
		for(int i = 0; i < size; i++){
			input[i] = s.nextInt();
		}
		return input;
	}
	
	public static void main(String[] args) {
		int[] input = takeInput();
		Solution.quickSort(input);
		for(int i = 0; i < input.length; i++) {
			System.out.print(input[i] + " ");
		}
	}
}



Solution:


/*
	To apply the method explained in the hint video, we have to add two more parameters in the function call. This can be done by calling a helper function from given function. The helper function can have three parameters: array, start index, end index.  

	Skeleton code to achieve this:
	public class Solution {
		public static void quickSort(int[] input, int startIndex, int endInedx) {
			// your code goes here
		}

		public static void quickSort(int[] input) {
			quickSort(input, 0, input.length - 1);
		}

	}

*/


public class Solution {

    public static void quickSort(int[] input, int si, int ei){
        if(si>=ei){
            return;
        }
        int pi = si;
        int i = si;
        int j = ei;
        while(i<j){
            while(input[i]<=input[pi] && i<ei){
                i++;
            }
            while(input[j]>input[pi] && j>si){
                j--;
            }
            //swap
            if(i<j){
                int temp=input[i];
                input[i]=input[j];
                input[j]=temp;
            }
        }

        int temp=input[j];
        input[j]=input[pi];
        input[pi]=temp;

        quickSort(input,si,j-1);
        quickSort(input,j+1,ei);
    }

    public static void quickSort(int[] input) {
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * No need to print or return the output.
		 * Taking input and printing output is handled automatically.
		 */
        quickSort(input,0,input.length-1);
    }

}
