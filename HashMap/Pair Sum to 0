Pair Sum to 0


Given a random integer array A of size N. Find and print the count of pair of elements in the array which sum up to 0.
Note: Array A can contain duplicate elements as well.
Input format:
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N.
The following line contains N space separated integers, that denote the value of the elements of the array.
Output format :
The first and only line of output contains the count of pair of elements in the array which sum up to 0. 
Constraints :
0 <= N <= 10^4
Time Limit: 1 sec
Sample Input 1:
5
2 1 -2 2 3
Sample Output 1:
2


Solution:

import java.util.*;

public class Solution {

    public static int fact(int n){
        if(n==0 || n==1){
            return 1;
        }
        return n*fact(n-1);
    }

    public static int ncr(int n){
        if(n<2){
            return 0;
        }
        return fact(n)/(fact(n-2)*fact(2));
    }

    public static int PairSum(int[] input, int size) {
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
        HashMap<Integer, Integer> map =new HashMap<Integer, Integer>();
        for(int i=0; i<size; i++){
            if(map.containsKey(input[i])){
                int val = map.get(input[i]);
                map.put(input[i],++val);
            }
            else{
                map.put(input[i],1);
            }
        }
        int count = 0;
        for(int i=0; i<size; i++){
            int key = input[i];
            if (map.containsKey(-key) && map.get(key)!=0){
                if (key == -key){
                    int occurences = map.get(key);
                    count += ((occurences*(occurences-1))/2);
                    map.put(key,0);
                    continue;
                }
                int occurences = map.get(-key);
                count += occurences*map.get(key);
                map.put(key,0);
                map.put(-key,0);
            }
        }
        return count;
    }
}
