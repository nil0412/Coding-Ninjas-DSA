Replace duplicate values



Given a linked list that contain some random integers from 1 to n with many duplicates. You need to replace each duplicate element that is present in the linked list with the values n+1, n+2, and so on (starting from left to right in given LL).
For eg. if input linked list is
1 3 1 4 4 2 1 -1
updated linked list should be -
1 3 5 4 6 2 7
n in the list is 4, so I have to replace each duplicate from left to right with 4, 5 and so on. In that way, element 1 (which is at index 2) will be replaced by 5, element 4 (which is present at index 4) by 6 and element 1 (which is present at index 6) by 7.
You don't need to print the elements, just update the elements in LL.
Input format :
Linked list elements (separated by space and terminated by-1)
Output Format :
Updated LL elements (separated by space)
Sample Input 1 :
1 3 1 4 4 2 1 -1
Sample Output 1 :
1 3 5 4 6 2 7


Main Code:

import java.util.Scanner;

class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
		this.next = null;
	}
}

public class runner {
	private static Scanner s = new Scanner(System.in);

	public static LinkedListNode<Integer> input() {
		int data = s.nextInt();

		LinkedListNode<Integer> head = null;
		LinkedListNode<Integer> tail = null;
		while (data != -1) {
			LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
			if (head == null) {
				head = newNode;
				tail = newNode;
			} else {
				tail.next = newNode;
				tail = newNode;
			}
			data = s.nextInt();
		}
		return head;
	}

	public static void print(LinkedListNode<Integer> head) {
		while (head != null) {
			System.out.print(head.data + " ");
			head = head.next;
		}
	}

	public static void main(String[] args) {
		LinkedListNode<Integer> head = input();
		solution.changeLL(head);
		print(head);
	}
}


Solution:

/******** 
Following is the structure of Linked list node
class LinkedListNode<T> {
	public T data;
	public LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
		this.next = null;
	}
}
*********/

import java.util.HashMap;

public class solution {

    public static void changeLL(LinkedListNode<Integer> head) {
        // Write your code here
        HashMap<Integer, Integer> mymap = new HashMap<>();
        LinkedListNode<Integer> temp = head;
        int maxNum = 0;
        while (temp != null)
        {
            mymap.put(temp.data,(mymap.get(temp.data) ==
                                 null?0:mymap.get(temp.data))+1);
            if (maxNum < temp.data)
                maxNum = temp.data;
            temp = temp.next;
        }
        temp = head;
        while (temp != null)
        {
            if (mymap.get(temp.data) > 1)
                mymap.put(temp.data, -1);
            else if (mymap.get(temp.data) == -1)
                temp.data = ++maxNum;
            temp = temp.next;
        }
    }
}
