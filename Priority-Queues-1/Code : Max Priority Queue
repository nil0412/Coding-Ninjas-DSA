Code : Max Priority Queue


Implement the class for Max Priority Queue which includes following functions -
1. getSize -
Return the size of priority queue i.e. number of elements present in the priority queue.
2. isEmpty -
Check if priority queue is empty or not. Return true or false accordingly.
3. insert -
Given an element, insert that element in the priority queue at the correct position.
4. getMax -
Return the maximum element present in the priority queue without deleting. Return -Infinity if priority queue is empty.
5. removeMax -
Delete and return the maximum element present in the priority queue. Return -Infinity if priority queue is empty.
Note : main function is given for your reference which we are using internally to test the class.


Main Code:

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));;
	static StringTokenizer st;

	public static void main(String[] args) throws NumberFormatException, IOException {
		st = new StringTokenizer(br.readLine());
		PQ pq = new PQ();
		int choice = Integer.parseInt(st.nextToken());
		while(choice != -1) {
			switch(choice) {
				case 1 : // insert
					int element = Integer.parseInt(st.nextToken());
					pq.insert(element);
					break;
				case 2 : // getMax
					System.out.println(pq.getMax());
					break;
				case 3 : // removeMax
					System.out.println(pq.removeMax());
					break;
				case 4 : // size
					System.out.println(pq.getSize());
					break;
				case 5 : // isEmpty
					System.out.println(pq.isEmpty());
				default :
						return;
			}
			choice = Integer.parseInt(st.nextToken());
		}
	}

}



Solution:

import java.util.ArrayList;
// import java.util.Exceptions;

public class PQ {
	// Complete this class
    private ArrayList<Integer> arr; 
    
    public PQ(){
        arr = new ArrayList<>();
    }
    
	boolean isEmpty() {
		// Implement the isEmpty() function here
        if(arr.size()==0){
            return true;
        }
        return false;
	}

	int getSize() {
		// Implement the getSize() function here
        return arr.size();
	}

	int getMax() {
		// Implement the getMax() function here
        if(getSize()==0){
            return Integer.MAX_VALUE;
        }
        return arr.get(0);
	}

	void insert(int element) {
		// Implement the insert() function here
        arr.add(element);
        int childIndex = arr.size()-1;
        int parentIndex = (childIndex-1)/2;
        while(parentIndex>=0){
            if(arr.get(parentIndex)<arr.get(childIndex)){
                int temp = arr.get(parentIndex);
                arr.set(parentIndex, arr.get(childIndex));
                arr.set(childIndex, temp);
                childIndex = parentIndex;
                parentIndex = (childIndex-1)/2;
            }
            else{
                return;
            }
        }
        return;
	}

	int removeMax() {
		// Implement the removeMax() function here
        if(getSize()==0){
            return Integer.MAX_VALUE;
        }
        int ans = arr.get(0);
        arr.set(0, arr.get(arr.size()-1));
        arr.remove(arr.size()-1);
        int parentIndex = 0;
        int maxIndex = parentIndex;
        int leftChildIndex = 1;
        int rightChildIndex = 2;
        while(leftChildIndex<arr.size()){
            if(arr.get(leftChildIndex)>arr.get(maxIndex)){
                maxIndex = leftChildIndex;
            }
            if(rightChildIndex<arr.size() && arr.get(rightChildIndex)>arr.get(maxIndex)){
                maxIndex = rightChildIndex;
            }
            if(maxIndex == parentIndex){
                break;
            }
            else{
                int temp = arr.get(maxIndex);
                arr.set(maxIndex, arr.get(parentIndex));
                arr.set(parentIndex, temp);
                parentIndex = maxIndex;
                leftChildIndex = 2*parentIndex+1;
                rightChildIndex = 2*parentIndex+2;
            }
        }
        return ans;
	}
}
